{"dependencies":[{"name":"/Users/tatecarson/Documents/webDev/_Original Works/distributedSequencer/package.json","includedInParent":true,"mtime":1540330045645},{"name":"/Users/tatecarson/Documents/webDev/_Original Works/distributedSequencer/.babelrc","includedInParent":true,"mtime":1539210468567},{"name":"/Users/tatecarson/Documents/webDev/_Original Works/distributedSequencer/node_modules/euclidean-rhythms/package.json","includedInParent":true,"mtime":1540326427260}],"generated":{"js":"\"use strict\";\n\n/**\n   *  Returns the calculated pattern of equally distributed pulses in total steps\n   *  based on the euclidean rhythms algorithm described by Godfried Toussaint\n   *\n   *  @method  getPattern\n   *  @param {Number} pulses Number of pulses in the pattern\n   *  @param {Number} steps  Number of steps in the pattern (pattern length)\n   */\nvar getPattern = function getPattern(pulses, steps) {\n  if (pulses < 0 || steps < 0 || steps < pulses) {\n    return [];\n  }\n\n  // Create the two arrays\n  var first = new Array(pulses).fill([1]);\n  var second = new Array(steps - pulses).fill([0]);\n\n  var firstLength = first.length;\n  var minLength = Math.min(firstLength, second.length);\n\n  var loopThreshold = 0;\n  // Loop until at least one array has length gt 2 (1 for first loop)\n  while (minLength > loopThreshold) {\n    // Allow only loopThreshold to be zero on the first loop\n    if (loopThreshold === 0) {\n      loopThreshold = 1;\n    }\n\n    // For the minimum array loop and concat\n    for (var x = 0; x < minLength; x++) {\n      first[x] = Array.prototype.concat.call(first[x], second[x]);\n    }\n\n    // if the second was the bigger array, slice the remaining elements/arrays and update\n    if (minLength === firstLength) {\n      second = Array.prototype.slice.call(second, minLength);\n    }\n    // Otherwise update the second (smallest array) with the remainders of the first\n    // and update the first array to include onlt the extended sub-arrays\n    else {\n        second = Array.prototype.slice.call(first, minLength);\n        first = Array.prototype.slice.call(first, 0, minLength);\n      }\n    firstLength = first.length;\n    minLength = Math.min(firstLength, second.length);\n  }\n\n  // Build the final array\n  var pattern = [];\n  first.forEach(function (f) {\n    pattern = Array.prototype.concat.call(pattern, f);\n  });\n  second.forEach(function (s) {\n    pattern = Array.prototype.concat.call(pattern, s);\n  });\n\n  return pattern;\n};\n\nmodule.exports = {\n  getPattern: getPattern\n};","map":{"mappings":[{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/euclidean-rhythms/dist/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"../../node_modules/euclidean-rhythms/dist/index.js":"\"use strict\";\n\n/**\n   *  Returns the calculated pattern of equally distributed pulses in total steps\n   *  based on the euclidean rhythms algorithm described by Godfried Toussaint\n   *\n   *  @method  getPattern\n   *  @param {Number} pulses Number of pulses in the pattern\n   *  @param {Number} steps  Number of steps in the pattern (pattern length)\n   */\nvar getPattern = function getPattern(pulses, steps) {\n  if (pulses < 0 || steps < 0 || steps < pulses) {\n    return [];\n  }\n\n  // Create the two arrays\n  var first = new Array(pulses).fill([1]);\n  var second = new Array(steps - pulses).fill([0]);\n\n  var firstLength = first.length;\n  var minLength = Math.min(firstLength, second.length);\n\n  var loopThreshold = 0;\n  // Loop until at least one array has length gt 2 (1 for first loop)\n  while (minLength > loopThreshold) {\n    // Allow only loopThreshold to be zero on the first loop\n    if (loopThreshold === 0) {\n      loopThreshold = 1;\n    }\n\n    // For the minimum array loop and concat\n    for (var x = 0; x < minLength; x++) {\n      first[x] = Array.prototype.concat.call(first[x], second[x]);\n    }\n\n    // if the second was the bigger array, slice the remaining elements/arrays and update\n    if (minLength === firstLength) {\n      second = Array.prototype.slice.call(second, minLength);\n    }\n    // Otherwise update the second (smallest array) with the remainders of the first\n    // and update the first array to include onlt the extended sub-arrays\n    else {\n        second = Array.prototype.slice.call(first, minLength);\n        first = Array.prototype.slice.call(first, 0, minLength);\n      }\n    firstLength = first.length;\n    minLength = Math.min(firstLength, second.length);\n  }\n\n  // Build the final array\n  var pattern = [];\n  first.forEach(function (f) {\n    pattern = Array.prototype.concat.call(pattern, f);\n  });\n  second.forEach(function (s) {\n    pattern = Array.prototype.concat.call(pattern, s);\n  });\n\n  return pattern;\n};\n\nmodule.exports = {\n  getPattern: getPattern\n};"},"lineCount":64}},"hash":"20bb8600ef44233c0550168fdc710b7d","cacheData":{"env":{}}}