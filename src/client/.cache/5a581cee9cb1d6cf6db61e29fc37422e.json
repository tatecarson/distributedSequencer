{"dependencies":[{"name":"/Users/tatecarson/Documents/webDev/_Original Works/distributedSequencer/package.json","includedInParent":true,"mtime":1540330045645},{"name":"/Users/tatecarson/Documents/webDev/_Original Works/distributedSequencer/.babelrc","includedInParent":true,"mtime":1539210468567},{"name":"/Users/tatecarson/Documents/webDev/_Original Works/distributedSequencer/node_modules/parsejson/package.json","includedInParent":true,"mtime":1540326429780}],"generated":{"js":"var global = (1,eval)(\"this\");\n/**\r\n * JSON parse.\r\n *\r\n * @see Based on jQuery#parseJSON (MIT) and JSON2\r\n * @api private\r\n */\r\n\r\nvar rvalidchars = /^[\\],:{}\\s]*$/;\r\nvar rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\r\nvar rvalidtokens = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\r\nvar rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g;\r\nvar rtrimLeft = /^\\s+/;\r\nvar rtrimRight = /\\s+$/;\r\n\r\nmodule.exports = function parsejson(data) {\r\n  if ('string' != typeof data || !data) {\r\n    return null;\r\n  }\r\n\r\n  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\r\n\r\n  // Attempt to parse using the native JSON parser first\r\n  if (global.JSON && JSON.parse) {\r\n    return JSON.parse(data);\r\n  }\r\n\r\n  if (rvalidchars.test(data.replace(rvalidescape, '@')\r\n      .replace(rvalidtokens, ']')\r\n      .replace(rvalidbraces, ''))) {\r\n    return (new Function('return ' + data))();\r\n  }\r\n};","map":{"mappings":[{"source":"../../node_modules/parsejson/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/parsejson/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}}],"sources":{"../../node_modules/parsejson/index.js":"/**\r\n * JSON parse.\r\n *\r\n * @see Based on jQuery#parseJSON (MIT) and JSON2\r\n * @api private\r\n */\r\n\r\nvar rvalidchars = /^[\\],:{}\\s]*$/;\r\nvar rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\r\nvar rvalidtokens = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\r\nvar rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g;\r\nvar rtrimLeft = /^\\s+/;\r\nvar rtrimRight = /\\s+$/;\r\n\r\nmodule.exports = function parsejson(data) {\r\n  if ('string' != typeof data || !data) {\r\n    return null;\r\n  }\r\n\r\n  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\r\n\r\n  // Attempt to parse using the native JSON parser first\r\n  if (global.JSON && JSON.parse) {\r\n    return JSON.parse(data);\r\n  }\r\n\r\n  if (rvalidchars.test(data.replace(rvalidescape, '@')\r\n      .replace(rvalidtokens, ']')\r\n      .replace(rvalidbraces, ''))) {\r\n    return (new Function('return ' + data))();\r\n  }\r\n};"},"lineCount":33}},"hash":"ffbe2b47a32502b22f3916e749305d8a","cacheData":{"env":{}}}